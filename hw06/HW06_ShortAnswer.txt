 1. What is wrong with the following code and how would you fix it?    #ifndef PROJECTILE_H    #define PROJECTILE_H    class Projectile {    private:        double position;        double velocity;    public:        Projectile(double position, double velocity);        virtual  ÌƒProjectile();        double getPosition() const;        double getVelocity() const;    } // end of Projecile class    #endif

There should be a semicolon after the end bracket of the Projectile class. 

2. The following is the definition of the constructor for the Projectile class above, but there are three things wrong with it. What are they and how would you fix them?    Projectile(int position, int velocity) {        this.position = position;        this.velocity = velocity;    } // end of constructor

ANSWER:
Projectile::Projectile(double position, double velocity) {        this->position = position;        this->velocity = velocity;    } // end of constructor

3. Describe each of the following methods(a) int* method(int* arg);
a method with a parameter for int pointer and returns an int pointer
(b) const int* method(int* arg);
a method with a parameter for int pointer and returns a pointer to a const int
(c) const int* const method(int* arg);
a method with a parameter for int pointer and returns a const pointer to a const int

(d) const int* const method(const int* arg);
a method with a parameter for a pointer to a const int and returns a pointer to a const int
(e) const int* const method(const int* arg) const;
a const method with a parameter for a pointer to a const int and returns a pointer to a const int

4. In what ways are C++ strings better than C strings? In what ways are C strings better than C++ strings?
C++ strings are safer and more convenient to use than C strings, and their length can be determined using a length() method.
C strings are used by C libraries and require less memory.

5. What is the difference between a pointer and a reference?
Pointers store the memory address of a variable, can be NULL, and are difficult to dereference. References are an alias for another variable, cannot be NULL, and are automatically dereferenced. 

6. What is a destructor for?
Destructors are called automatically when an object is deleted and are used to delete heap memory allocated by the class.